git 笔记：版本控制管理工具(svn)

git config配置（修改作者和邮箱）





配置

git config --global user.name "username"

git config --global user.email "email"



查看
git config --global user.name 
git config --global user.email 




git init 创建保存目录




git add file 保存文件到暂存区（进行监控）
gif diff 比较不同（暂存区和本地所有文件比较，按Q退出）
gif diff -- file 比较不同（指定文件比较 file为文件名）



git commit -m "xxx" 把暂存区的所有文件提交到仓库
gif diff HEAD -- file 比较不同（仓库和本地比较）

git status 查看状态（是否有改变，本地和暂存区做对比，暂存区和仓库做对比）

git log 查看提交到仓库版本（详细）
git log --pretty=oneline 查看提交到仓库版本（粗略）
git log --graph --pretty=oneline --abbrev-commit  查看分支版本



git reset HEAD <file>  仓库回退文件到暂存区
git checkout -- file      回退暂存区版本到工作区

git reset --hard HEAD^ 
回退仓库版本到暂存区和本地
（window 换行符报more问题解决 HEAD^^/"HEAD^"/HEAD~1）

git reset --hard xxx
回退或前进到指定仓库版本（xxx为commit id 前几位字符就可以）

git reflog 仓库操作命令记录（上面不知道commit id的可通过此命令查看）






仓库里面有很多分支，默认：master，存储都是存master里面了


git checkout -b xxx    切换并创建xxx分支   git switch -c xxx
git branch xxx  创建分支
git checkout xxx 切换分支         git switch xxx
git branch 查看当前分支

git merge xxx  合并xxx分支（xxx的历史版本记录被记录到master中，而且不能在xxx中合并）


git merge --no-ff -m "merged bug fix 101" xxx 
合并xxx分支顺带提交（xxx的历史不会被记录到master中）

git branch -d xxx  删除xxx分支（不合并无法删除，可用-D强行删除）

git rm file 删除暂存区文件（记得提交commit）




---------
git stash 存档暂存区

git stash list 查看存档
git stash apply 恢复（stash内容并不删除）
git stash apply stash@{0}  恢复指定存档
git stash drop 删除
git stash pop 恢复+删除

git cherry-pick xxx
提交版本xxx的修改部分（xxx为commit id 前几位字符就可以）
----------




连仓库线远程：
git bash工具（开始菜单）
ssh-keygen -t rsa -C "youremail@example.com" 生成秘钥
文件在C:\Users\Administrator\.ssh里面
添加公钥到https://github.com/settings/keys


(https://github.com/shanniao99/project.git)
github :git@github.com:shanniao99/studyNotes.git

gitee:https://wmm99:9038f3259e47dbcc4bb43d8e5fe045ae@gitee.com/wmm99/projec.git


https://github.com/new创建远程仓库
关联远程库：（origin为默认仓库 xxx为网上用户名和仓库名）
git remote add origin git@github.com:xxx/xxx.git
git remote rm <name> 解除关联
git remote -v 查看远程信息
git push -u origin xxx 提交本地仓库xxx分支文件到远程仓库（ -u 创建对应分支 ）(xxx为分支名，例如master)
git push origin xxx 提交本地仓库文件到远程仓库（后期简化版本）
第一次使用会警告，需要添加信任列表。回车yes即可


git clone git@github.com:308655673/xiangmu.git
克隆远程仓库
git pull origin xxx:yyy 抓取远程xxx分支到本地并合并到yyy分支（合并分支）
git fetch <远程主机名> <分支名>  抓取远程xxx分支到本地（不合分支）
